import fs from "fs";
import { Markup } from "telegraf";
import { sessionPathFolder } from "./variables.js";

export function createSessionFolder() {
    // —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(sessionPathFolder)) {
        fs.mkdirSync(sessionPathFolder, { recursive: true });
    }
}

export function escapeMarkdown(text) {
    const specialCharacters = ["_", "[", "]", "(", ")", "~", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"];
    let escapedText = text;

    specialCharacters.forEach((char) => {
        const regex = new RegExp(`\\${char}`, "g");
        escapedText = escapedText.replace(regex, `\\${char}`);
    });

    return escapedText;
}

// HOC –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const withErrorHandling = (handler, errorMessage) => {
    return async (ctx) => {
        try {
            await handler(ctx);
        } catch (err) {
            ctx.reply(errorMessage || "üò¢ –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start");
            console.log(err);
        }
    };
};

// –®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
export const createMenu = (message, buttons) => {
    message = escapeMarkdown(message);

    const keyboardButtons = buttons.map((row) => row.map((button) => Markup.button.callback(button.text, button.action)));
    const keyboard = Markup.inlineKeyboard(keyboardButtons).resize();

    return { message, keyboard };
};

export const processSetting = (ctx, settingName, dataType, minValue = null, maxValue = null) => {
    return async (newValue) => {
        switch (dataType) {
        case "number":
            newValue = Number(newValue);
            if (minValue !== null && newValue < minValue) {
                return ctx.reply(`–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ ${minValue}`);
            }
                if (maxValue !== null && newValue > maxValue) {
                return ctx.reply(`–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ ${maxValue}`);
            }
            break;
        case "boolean":
            newValue = newValue.toLowerCase() === "true";
            break;
        case "string":
                // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
            break;
        default:
                return ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${dataType}`);
        }
        ctx.session[settingName] = newValue;
        return ctx.reply(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${settingName} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${newValue}`);
    };
};
